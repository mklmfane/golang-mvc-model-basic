// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts_bank.sql

package model

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts_bank (full_name)
VALUES ($1)
RETURNING id, full_name, created_at
`

func (q *Queries) CreateAccount(ctx context.Context, fullName string) (AccountsBank, error) {
	row := q.db.QueryRowContext(ctx, createAccount, fullName)
	var i AccountsBank
	err := row.Scan(&i.ID, &i.FullName, &i.CreatedAt)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts_bank
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, full_name, created_at
FROM accounts_bank
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (AccountsBank, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i AccountsBank
	err := row.Scan(&i.ID, &i.FullName, &i.CreatedAt)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts_bank
SET full_name = $2
WHERE id = $1
RETURNING id, full_name, created_at
`

type UpdateAccountParams struct {
	ID       int32
	FullName string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (AccountsBank, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.FullName)
	var i AccountsBank
	err := row.Scan(&i.ID, &i.FullName, &i.CreatedAt)
	return i, err
}
